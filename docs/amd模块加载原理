模块加载器实现原理
分为三部分
1、模块加载器内部初始化，
    (1)、解析模块加载器的data-main、data-baseurl两个属性节点，得到模块加载器基础路径和入口模块；
    (2)、赋值模块加载器配置对象的baseUrl属性 如果不存在data-baseurl，baseUrl为页面地址路径，反之，则是将当前页面地址路径和baseurl合并
    (3)、开始加载入口文件（支持逗号分隔）
2、模块加载器加载
    (1)、模块标识解析(包括别名)，得到模块名和模块真实路径
    moduleCache[ useKey ] = {
                    length : namesCache.length,
                    namesCache : namesCache,
                    names : [ modNames ],
                    urls : [ modUrls ],
                    callback : fn,
                    factorys : [],
                    deps : {}
                };
    (2)、开始加载



















1、得到入口模块和基础路径
    基础路径：如果当前执行的js文件不存在data-baseUrl，那么就是当前页面地址，反之则是data-baseurl和当前页面地址的合并
    入口模块：初始化如过存在入口模块，默认进行加载

2、解析模块标识（模块相对路径），判断是否有没有加载完成的模块，如果有，将未加载完成的模块进行加载，如果加载完成，则调用回调函数
3、加载模块
4、模块定义
    (1)、匿名无依赖模块
    (2)、匿名依赖模块
    (3)、具名无依赖模块
    (4)、具名依赖模块
 在定义模块对象集合中，模块标识作为key，value指定为一个json对象，该对象包括status、deps、exports属性

/////////////////////// 代码实现细节 ///////////////////////

获取当前模块加载器所在script DOM
ie9、10、ff、chrome使用document.currentScript
ie6-8使用document.getElementByTagName找到最后一个

获取脚本文件名
ie9-10、ff、chrome
使用捕获异常
ie6-8
判断script.readyState


